services:
  open-music-api:
    container_name: open-music-api
    build:
      context: ./api
      dockerfile: ./Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: always
    networks:
      - postgres
      - rabbitmq
    env_file:
      - ./api/.env
    links:
      - postgres
      - rabbitmq
    ports:
      - ${PORT}:${PORT}
    volumes:
      - ./api/src/albums/covers/:/usr/src/app/src/albums/covers
  exporter:
    container_name: exporter
    build:
      context: ./exporter
      dockerfile: ./Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: always
    networks:
      - postgres
      - rabbitmq
    env_file:
      - ./exporter/.env
    links:
      - postgres
      - rabbitmq
    ports:
      - 5001:${PORT}
  postgres:
    container_name: postgres
    image: postgres:16.1-alpine3.19
    restart: always
    healthcheck:
      test:
        ["CMD", "pg_isready", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}"]
      interval: 5s
      timeout: 30s
      retries: 3
      start_period: 10s
    env_file:
      - ./.env
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    # volumes:
    #   - postgres:/var/lib/postgresql/data
    networks:
      - postgres
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.13.2-management-alpine
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 5m
      retries: 5
      start_period: 45s
    env_file:
      - ./.env
    networks:
      - rabbitmq
    ports:
      - ${RABBITMQ_PORT}:${RABBITMQ_PORT}
      - ${RABBITMQ_MANAGEMENT_PORT}:${RABBITMQ_MANAGEMENT_PORT}
# volumes:
#   postgres:
#     name: postgres
networks:
  postgres:
    name: postgres
  rabbitmq:
    name: rabbitmq
