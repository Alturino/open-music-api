meta {
  name: -Tom- Get John Playlist Songs
  type: http
  seq: 9
}

get {
  url: http://localhost:{{port}}/playlists/{{playlistIdJohn}}/songs
  body: json
  auth: bearer
}

auth:bearer {
  token: {{accessTokenTom}}
}

tests {
  test('it should response 200 status code', () => {
  //     expect(pm.response).to.have.status(200);
  });
  
  test('response Content-Type header should have application/json value', () => {
  //     expect(pm.response.headers.get('Content-Type')).to.includes('application/json');
  }); 
  
  test('response body should an object', () => {
      const responseJson = res.getBody();
      expect(responseJson).to.be.an('object');
  });
  
  test('response body have correct property and value', () => {
      const responseJson = res.getBody();
  
      expect(responseJson.status).to.equal('success');
      expect(responseJson.data).to.be.an('object');
      expect(responseJson.data.playlist).to.be.an('object');
      expect(responseJson.data.playlist.id).to.be.a('string');
      expect(responseJson.data.playlist.name).to.equal('Lagu Indie Hits Indonesia');
      expect(responseJson.data.playlist.username).to.equal('john');
      
      expect(responseJson.data.playlist.songs).to.be.an('array');
      expect(responseJson.data.playlist.songs).to.length(2);
      const { songs } = responseJson.data.playlist;
      songs.forEach((song) => {
          expect(Object.keys(song)).to.length(3);
          expect(song.id).to.be.ok;
          expect(song.title).to.be.ok;
          expect(song.performer).to.be.ok;
      });
  });
}
