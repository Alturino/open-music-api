meta {
  name: Get Detail Songs with Valid Id
  type: http
  seq: 6
}

get {
  url: http://localhost:{{port}}/songs/{{songId}}
  body: none
  auth: none
}

tests {
  test('it should response 200 status code', () => {
  //     expect(pm.response).to.have.status(200);
  });
  
  test('response Content-Type header should have application/json value', () => {
  //     expect(pm.response.headers.get('Content-Type')).to.includes('application/json');
  }); 
  
  test('response body should an object', () => {
      const responseJson = res.getBody();
      expect(responseJson).to.be.an('object');
  });
  
  test('response body should have correct property and value', () => {
      const songId = bru.getEnvVar('songId');
      const responseJson = res.getBody();
      
      expect(responseJson.status).to.equal('success');
      expect(responseJson.data).to.be.a('object');
      expect(responseJson.data.song).to.be.an('object');
      expect(responseJson.data.song.id).to.equal(songId);
      expect(responseJson.data.song.title).to.equal('Life in Technicolor');
      expect(responseJson.data.song.year).to.equal(2008);
      expect(responseJson.data.song.performer).to.equal('Coldplay');
      expect(responseJson.data.song.genre).to.equal('Pop');
      expect(responseJson.data.song.duration).to.equal(120);
  });
  
}
