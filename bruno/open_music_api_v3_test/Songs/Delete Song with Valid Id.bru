meta {
  name: Delete Song with Valid Id
  type: http
  seq: 11
}

delete {
  url: http://localhost:{{port}}/songs/{{songId}}
  body: json
  auth: none
}

tests {
  test('it should response 200 status code', () => {
  //     expect(pm.response).to.have.status(200);
  });
  
  test('response Content-Type header should have application/json value', () => {
  //     expect(pm.response.headers.get('Content-Type')).to.includes('application/json');
  }); 
  
  test('response body should an object', () => {
      const responseJson = res.getBody();
      expect(responseJson).to.be.an('object');
  });
  
  test('response body should have correct property and value', () => {
      const responseJson = res.getBody();
      
      expect(responseJson.status).to.equal('success');
      expect(responseJson.message).to.be.a('string');
  });
  
  test('when GET detail song', () => {
      const songId = bru.getEnvVar('songId');
      const port = bru.getEnvVar('port');
  //     pm.sendRequest(`http://localhost:${port}/songs/${songId}`, (error, response) => {
          if (!error) {
              test('it should response with not found', () => {
                  expect(response.code).to.equal(404);
              });
          }
      });
  });
  
}
