meta {
  name: Login with Invalid Payload
  type: http
  seq: 1
}

post {
  url: http://localhost:{{port}}/authentications
  body: json
  auth: none
}

body:json {
  {{currentBadLoginPayload}}
}

script:pre-request {
  let badLoginPayloads = bru.getEnvVar('badLoginPayloads');
  
  if (!badLoginPayloads | badLoginPayloads.length === 0) {
      badLoginPayloads = [
          {},
          { username: true },
          { username: 'dicoding' },
          { username: 'dicoding', password: true }
      ];
  }
  
  const currentBadLoginPayload = badLoginPayloads.shift();
  bru.setEnvVar('currentBadLoginPayload', JSON.stringify(currentBadLoginPayload));
  bru.setEnvVar('badLoginPayloads', badLoginPayloads);
}

tests {
  test('it should response 400 status code', () => {
  //     expect(pm.response).to.have.status(400);
  });
  
  test('response Content-Type header should have application/json value', () => {
  //     expect(pm.response.headers.get('Content-Type')).to.includes('application/json');
  }); 
  
  test('response body should an object', () => {
      const responseJson = res.getBody();
      expect(responseJson).to.be.an('object');
  });
  
  test('response body have correct property and value', () => {
      const responseJson = res.getBody();
  
      expect(responseJson.status).to.equal('fail');
      expect(responseJson.message).to.be.a('string');
  })
  
  const repeatRequestUntilDatasetEmpty = () => {
      const badLoginPayloads = bru.getEnvVar('badLoginPayloads');
   
      if(badLoginPayloads && badLoginPayloads.length > 0) {
          bru.setNextRequest('Login with Invalid Payload');
      }
  }
   
  repeatRequestUntilDatasetEmpty();
}
