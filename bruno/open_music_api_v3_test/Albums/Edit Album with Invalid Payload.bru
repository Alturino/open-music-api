meta {
  name: Edit Album with Invalid Payload
  type: http
  seq: 5
}

put {
  url: http://localhost:{{port}}/albums/{{albumId}}
  body: json
  auth: none
}

body:json {
  {{currentBadAlbumPayload}}
}

script:pre-request {
  let badAlbumPayloads = bru.getEnvVar('badAlbumPayloads');
  
  if (!badAlbumPayloads | badAlbumPayloads.length === 0) {
      badAlbumPayloads = [
          {},
          { name: 1 },
          { name: 'Bad song' },
          { name: 'Bad song', year: 'dummy' },
      ]
  }
  
  const currentBadAlbumPayload = badAlbumPayloads.shift();
  bru.setEnvVar('currentBadAlbumPayload', JSON.stringify(currentBadAlbumPayload));
  bru.setEnvVar('badAlbumPayloads', badAlbumPayloads);
  
  
}

tests {
  test('it should response 400 status code', () => {
  //     expect(pm.response).to.have.status(400);
  });
  
  test('response Content-Type header should have application/json value', () => {
  //     expect(pm.response.headers.get('Content-Type')).to.includes('application/json');
  }); 
  
  test('response body should an object', () => {
      const responseJson = res.getBody();
      expect(responseJson).to.be.an('object');
  });
  
  test('response body have correct property and value', () => {
      const responseJson = res.getBody();
  
      expect(responseJson.status).to.equal('fail');
      expect(responseJson.message).to.be.a('string');
  })
  
  const repeatRequestUntilDatasetEmpty = () => {
      const badAlbumPayloads = bru.getEnvVar('badAlbumPayloads');
   
      if(badAlbumPayloads && badAlbumPayloads.length > 0) {
          bru.setNextRequest('Edit Album with Invalid Payload');
      }
  }
   
  repeatRequestUntilDatasetEmpty();
}
